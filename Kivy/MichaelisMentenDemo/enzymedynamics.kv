#: import FadeTransition kivy.uix.screenmanager.FadeTransition
#: import Markup kivy.core.text.markup
#:import random random


<MyScreenManager>:
	transition: FadeTransition()
	MainMenu:
	MainCanvas:

<MainMenu>:
	name: 'MainMenu'
	canvas:
		Color:
			rgba: 1,1,1,1
	    Rectangle:
	        pos: self.pos
	        size: self.size	

    Image:
    	#size: self.parent.width/2, self.parent.height/2
    	size_hint: (.25, 1)
    	pos_hint: {'x':  -0.03, 'y': 0}
    	allow_stretch: False
    	keep_ratio: True
		source: 'img/menuThing.png'	
		color: 198/255,40/255,40/255,0.8

    Image:
    	#size: self.parent.width/2, self.parent.height/2
    	size_hint: (.25, .25)
    	pos_hint: {'x':  0.75, 'y': 0.05}
    	allow_stretch: False
    	keep_ratio: True
		source: 'img/menuIcoColored.png'
		color: 1,1,1,0.8	

    Image:
    	#size: self.parent.width/2, self.parent.height/2
    	size_hint: (.20, .20)
    	pos_hint: {'x': 0.8, 'y': 0.78}
    	allow_stretch: False
    	keep_ratio: True
		source: 'img/bannerColored.png'	
		color: 1,1,1,0.8

	BoxLayout:
		orientation: 'vertical'
		padding: 90,30,90,50
		spacing: 30
		Image:
			pos_hint: {'center_x':  .5, 'y': 0}
			size_hint: (.5, 0.15)
			source: 'img/logoColored.png'
			color: 1,1,1,0.7

		Button:
			pos_hint: {'center_x':  .5, 'y': 0}
			size_hint: (.5, 0.15)
			text: 'New diagram'
			font_size: 20
			bold: True
			color: 0,0,0,1
			background_color: 255,255,255,1
			on_release: app.root.current = 'MainCanvas'
			canvas.before:
				Color:
					rgba: 0/255, 0/255, 0/255, 1
				Rectangle:
		            pos: self.pos[0] - 2, self.pos[1] - 2
		            size: self.width + 4, self.height + 4

		Button:
			pos_hint: {'center_x':  .5, 'y': 0}
			size_hint: (.5, 0.15)
			background_color: 255,255,255,1
			text: 'Open diagram'
			font_size: 20
			bold: True
			color: 0,0,0,1
			canvas.before:
				Color:
					rgba: 0/255, 0/255, 0/255, 1
				Rectangle:
		            pos: self.pos[0] - 2, self.pos[1] - 2
		            size: self.width + 4, self.height + 4

		Button:
			pos_hint: {'center_x':  .5, 'y': 0}
			size_hint: (.5, 0.15)
			background_color: 255,255,255,1
			font_size: 20
			bold: True
			text: 'Upload diagram'
			color: 0,0,0,1
			canvas.before:
				Color:
					rgba: 0/255, 0/255, 0/255, 1
				Rectangle:
		            pos: self.pos[0] - 2, self.pos[1] - 2
		            size: self.width + 4, self.height + 4

		Label: 
			pos_hint: {'center_x':  .5, 'y': 0}
			font_size: 10
			color: 0,0,0,1
			size_hint: (.5, 0.04)
			text: 'Disclaimer: this software is provided with absolutely no guaranty.\nThe authors hold no responsibilities for any results or consequences derived of its usage.'

<MainCanvas>:
	name: 'MainCanvas'
	id: 'myMainCanvas'
	on_enter: app.applyConfig()
	BoxLayout:
		orientation: 'horizontal'
		OptionsCanvas:
			orientation: 'vertical'
			padding: 30,80,30,80
			spacing: 50
			size_hint: .15,1
			borderChangeVariable: (myNodeCanvas.settingS or myNodeCanvas.settingP)
			canvas:
			    Color:
		            rgba: 84/255, 110/255, 122/255, 1
		        Rectangle:
		            pos: self.pos
		            size: self.width-3, self.height
		            texture:
		            	
			    Color:
		            rgba: (0/255, 0/255, 0/255, 1) if not self.borderChangeVariable else root.contextColor
		        Rectangle:
		            pos: self.pos[0] + self.width - 3, self.pos[1] 
		            size: 3,self.height			            

			Button:

				on_release: myNodeCanvas.buttonBehaviour()
				background_color: (255,255,255,1) 
				color: 0,0,0,1
				text: root.contextText
				borderChangeVariable: (myNodeCanvas.settingS or myNodeCanvas.settingP)
				font_size: 15
				canvas.before:
					Color:
						rgba: (0/255,0/255,0/255,1) if not self.borderChangeVariable else root.contextColor
					Rectangle:
			            pos: self.pos[0] - 2, self.pos[1] - 2
			            size: self.width + 4, self.height + 4
		

		    Button:
		    	text: 'Delete\nmode: ' + ('ON' if myNodeCanvas.deletingNodes else 'OFF')
		    	font_size: 15
		    	on_release: myNodeCanvas.setDeletingNodes()
				background_color: 255,255,255,1
				color: 0,0,0,1
				borderChangeVariable: myNodeCanvas.deletingNodes
				canvas.before:
					Color:
						rgba: (198/255,40/255,40/255,1) if self.borderChangeVariable else (0/255, 0/255, 0/255, 1)
					Rectangle:
			            pos: self.pos[0] - 2, self.pos[1] - 2
			            size: self.width + 4, self.height + 4

		    Button:
		    	background_color: 255,255,255,1
		    	font_size: 15
		    	text: 'Erase\neverything'
		    	on_release: if not myNodeCanvas.settingS and not myNodeCanvas.settingP: myNodeCanvas.removeAllNodes() #quick fix for begining reaction and then ereasing everything
				color: 0,0,0,1
				canvas.before:
					Color:
						rgba: 0/255, 0/255, 0/255, 1
					Rectangle:
			            pos: self.pos[0] - 2, self.pos[1] - 2
			            size: self.width + 4, self.height + 4

		    Button:
		    	background_color: 255,255,255,1
		    	font_size: 15
		    	#size_hint: .2, 1
		    	text: 'Settings'
				color: 0,0,0,1
		    	on_release: app.open_settings()
				canvas.before:
					Color:
						rgba: 176/255, 190/255, 197/255, 1
					Rectangle:
			            pos: self.pos[0] - 2, self.pos[1] - 2
			            size: self.width + 4, self.height + 4

		    Button:
		    	background_color: 255,255,255,1
		    	font_size: 15
		    	size_hint: 1, 2
		    	text: 'Solve'
		    	color: 0,0,0,1
		    	bold: True
		    	on_release: if myNodeCanvas.compounds: myNodeCanvas.solveSystem() #Disallows solving when there are no nodes
				canvas.before:
					Color:
						rgba: 255/255, 183/255, 77/255, 1#84/255, 110/255, 122/255, 1
					Rectangle:
			            pos: self.pos[0] - 2, self.pos[1] - 2
			            size: self.width + 4, self.height + 4
	    	Slider:
	    		size_hint: 1, 0.2
	    		min: 0
	    		max: 100
	    		value: 0
	    		on_value: myNodeCanvas.simulationSpeed = self.value


	    FloatLayout:
	    	id: scatterHolder

	    	size_hint: .85,1


		    NodeCanvas:
		    	id: myNodeCanvas
		    	size_hint: 10,10
		    	scale_min: .5
		    	scale_max: 3.
		    	do_rotation: False
		    	auto_bring_to_front: False
		    	do_collide_after_children: True
		    	#borderChangeVariable: (self.settingS or self.settingP)
				canvas.before:
				    Color:
			            rgba: root.contextColor #(0/255, 0/255, 0/255, 1) if not self.borderChangeVariable else root.contextColor
			        Rectangle:
			            pos: self.pos
			            size: self.size
			            texture:
			            	
				    Color:
			            rgba: 1,1,1,1
			        Rectangle:
			            pos: self.pos#self.pos[0] + 10, self.pos[1] + 5
			            size: self.size#self.width - 20,self.height - 10	

		    Image:
		    	#size: self.parent.width/2, self.parent.height/2
		    	size_hint: (.5, 1)
		    	pos_hint: {'center_x':  0.75, 'y': -0.25}
		    	allow_stretch: False
		    	keep_ratio: True
	    		source: 'img/backgroundThing.png'	
	    		color: root.contextColor 	

		    Image:
		    	#size: self.parent.width/2, self.parent.height/2
		    	size_hint: (.2, .2)
		    	pos_hint: {'center_x': .4, 'y': .45}
		    	allow_stretch: False
		    	keep_ratio: True
	    		source: 'img/ico.png'	
	    		color: root.contextColor
	    		mipmap: True

		    Image:
		    	#size: self.parent.width/2, self.parent.height/2
		    	size_hint: (.3, .3)
		    	pos_hint: {'x': 0.01, 'y': -0.1}
		    	allow_stretch: False
		    	keep_ratio: True
	    		source: 'img/logo.png'	
	    		color: root.contextColor
	    		mipmap: False

	Image:
		#size: self.parent.width/2, self.parent.height/2
		size_hint: (0.5, 1)
		pos_hint: {'x': -0.3, 'y': 0}
		allow_stretch: False
		keep_ratio: True
		source: 'img/menuThing.png'	
		color: 1,1,1,0.3#root.contextColor
		mipmap: False

<ReactionHelper>:
	size_hint: (.5, .1)
	pos: (app.root.width - self.width)/2,app.root.height - self.height
	canvas.before:
		Color:
			rgba: root.contextColor
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3
		Color:
			rgba: 1,1,1,1
		Rectangle:
        	size: self.size
        	pos: self.pos
	Button:
		size_hint: (0.1, 1)
		text: 'Cancel'
		on_release: root.cancelButton()
		color: 1,1,1,1
		background_color: (0, 0, 0, 1)

	Label:
		id: MyHelperLabel
		color: 0,0,0,1
		markup: True

<InitialInstructions>:
	size_hint: (.5, .1)
	pos: (app.root.width - self.width)/2,app.root.height - self.height
	canvas.before:
		Color:
			rgba: 0,0,0,1
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3
		Color:
			rgba: 1,1,1,1
		Rectangle:
        	size: self.size
        	pos: self.pos
	Label:
		text: '[color=D50000] Start[/color] by clicking the canvas to create a node.'
		color: 0,0,0,1
		markup: True

<GraphNode>:
    # do_scale: False
    # do_rotation: False

    text: self.name + '\n     '+ "{0:0.1f}".format(self.c) if not self.special == 'sourceSink' else self.name
    color: self.contextColor #0.3, 0.5, 0.6, 0.8 #255/255, 196/255, 0/255, 1
	size_hint: None,None
    size: 100,100
    font_size: 15
    bold: True
    borderChangeVariable: self.deletingNodes
    specialVariable: self.special
    canvas.before:
        Color:
        	rgba: self.colorAnim if self.borderChangeVariable else self.contextColor
        Ellipse:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3


		StencilPush

		# create a rectangular mask with a pos of (100, 100) and a (100, 100) size.
        Color:
        	rgba: 1, 0, 0, 0
        Ellipse:
        	size: self.specialEffectSize
        	pos: self.pos

		StencilUse

		# we want to show a big green rectangle, however, the previous stencil
		# mask will crop us :)
		Color:
		    rgba: self.fillColor
		Rectangle:
        	size: self.size
        	#pos: (self.pos[0], self.pos[1] - 100*(1-self.c/app.root.children[0].ids.myNodeCanvas.totalC)) if app.root.children[0].ids.myNodeCanvas.totalC > 0.01 and not self.special == 'sourceSink'  else (self.pos[0], self.pos[1] - nodeSize[0])
        	pos: (self.pos[0], self.pos[1] - 100*(1-self.c/self.totalC)) if self.totalC > 0.01 and not self.special == 'sourceSink'  else (self.pos[0], self.pos[1] - 100)
		
		StencilUnUse

		# you must redraw the stencil mask to remove it
        Ellipse:
        	size: self.size
        	pos: self.pos

		StencilPop    

<NodePopup>:
	size_hint: .6,None
	title: 'PLEASE WRITE THE COMPOUND NAME AND CONCENTRATION'
	title_color: 0,0,0,1
	title_size: 15
	background: str([1, 1, 1, 1])
	canvas.before:
		Color:
			rgba: 0,0,0,1
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3

<ReactionPopup>:
	title: 'Reaction data:'
	title_color: 0,0,0,1
	title_size: 15
	background: str([1, 1, 1, 1])
	canvas.before:
		Color:
			rgba: 0,0,0,1
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3

<ResultPopup>:
	size_hint: .6,.9
	title: 'SIMULATION RESULTS'
	title_color: 0,0,0,1
	title_size: 15
	background: str([1, 1, 1, 1])
	canvas.before:
		Color:
			rgba: 0,0,0,1
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3

<InhibitionPopup>:
	title: 'Inhibition data for: ' + self.nameI if not self.nameI == '' else 'Inhibition data'
	title_color: 0,0,0,1
	title_size: 15
	background: str([1, 1, 1, 1])
	canvas.before:
		Color:
			rgba: 0,0,0,1
		Rectangle:
        	size: self.width + 6, self.height + 6
        	pos: self.pos[0] - 3, self.pos[1] - 3

<Reaction>:
	text: self.boxText
	color: 0,0,0,1
	bold: True
	size_hint: None,None
	size: 1.5*50,1.5*20
	pos: [self.boxPosition[0] - self.width/2, self.boxPosition[1] - self.height/2]
	canvas:
		Color:
			rgba: 1,1,1,0.1
		Rectangle:
			size: self.size
			pos: self.pos

<InhibitionPropierties>:
	text: self.iBoxText
	bold: True
	color: 0,0,0,1
	size_hint: None,None
	size: 1.5*50,1.5*20
	canvas:
		Color:
			rgba: 1,1,1,0.1
		Rectangle:
			size: self.size
			pos: self.pos	

<Slider>:   

    Label:
        pos: (root.value_pos[0] - sp(16), root.center_y - sp(27) - 20)  if root.orientation == 'horizontal' else (root.center_x - sp(27), root.value_pos[1] - sp(16))
        size_hint: None, None
        size: sp(32), sp(32)
        text: "{0:0.1f}".format(root.value) if not root.value > 99.98 else "inf"

<mySettings>:
	interface_cls: 'mySettingsInterface'
    # canvas:
    # 	Color:
    # 		rgba: (1, 1, 1, 1)
    # 	Rectangle:
    # 		size: self.size
    # 		pos: self.pos


# <mySettingTitle>:  
#     text_size: self.width - 32, None
#     size_hint_y: None
#     height: max(dp(20), self.texture_size[1] + dp(20))
#     color: settings.TEXT_COLOR
#     font_size: '15sp'
#     bold: True
#     halign: 'center'
